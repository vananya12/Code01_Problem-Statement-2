version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: stackit-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: stackit
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./server/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - stackit-network

  # Backend API Server
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stackit-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/stackit?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRE: 7d
      CLIENT_URL: http://localhost:3000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    networks:
      - stackit-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: client/Dockerfile
    container_name: stackit-client
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - server
    networks:
      - stackit-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: stackit-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - stackit-network

volumes:
  mongodb_data:

networks:
  stackit-network:
    driver: bridge 